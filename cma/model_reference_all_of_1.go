/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org. For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.0.3
Contact: ho.support-api@cma-cgm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cma

import (
	"encoding/json"
)

// ReferenceAllOf1 struct for ReferenceAllOf1
type ReferenceAllOf1 struct {
	// The actual value of the reference.
	ReferenceValue *string `json:"referenceValue,omitempty"`
}

// NewReferenceAllOf1 instantiates a new ReferenceAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceAllOf1() *ReferenceAllOf1 {
	this := ReferenceAllOf1{}
	return &this
}

// NewReferenceAllOf1WithDefaults instantiates a new ReferenceAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceAllOf1WithDefaults() *ReferenceAllOf1 {
	this := ReferenceAllOf1{}
	return &this
}

// GetReferenceValue returns the ReferenceValue field value if set, zero value otherwise.
func (o *ReferenceAllOf1) GetReferenceValue() string {
	if o == nil || o.ReferenceValue == nil {
		var ret string
		return ret
	}
	return *o.ReferenceValue
}

// GetReferenceValueOk returns a tuple with the ReferenceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceAllOf1) GetReferenceValueOk() (*string, bool) {
	if o == nil || o.ReferenceValue == nil {
		return nil, false
	}
	return o.ReferenceValue, true
}

// HasReferenceValue returns a boolean if a field has been set.
func (o *ReferenceAllOf1) HasReferenceValue() bool {
	if o != nil && o.ReferenceValue != nil {
		return true
	}

	return false
}

// SetReferenceValue gets a reference to the given string and assigns it to the ReferenceValue field.
func (o *ReferenceAllOf1) SetReferenceValue(v string) {
	o.ReferenceValue = &v
}

func (o ReferenceAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReferenceValue != nil {
		toSerialize["referenceValue"] = o.ReferenceValue
	}
	return json.Marshal(toSerialize)
}

type NullableReferenceAllOf1 struct {
	value *ReferenceAllOf1
	isSet bool
}

func (v NullableReferenceAllOf1) Get() *ReferenceAllOf1 {
	return v.value
}

func (v *NullableReferenceAllOf1) Set(val *ReferenceAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceAllOf1(val *ReferenceAllOf1) *NullableReferenceAllOf1 {
	return &NullableReferenceAllOf1{value: val, isSet: true}
}

func (v NullableReferenceAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


