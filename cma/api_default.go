/*
 * logistic.tracking.v1
 *
 * Retrieve tracking data about your cargo using container number, booking number or bill of lading.
 *
 * API version: 1.4.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cma

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type DefaultApi interface {

	/*
	 * GetLastCycleMoveFromEquipment all moves information related to a container of its last cycle
	 * <p>This method returns for a container all moves of its last cycle.&nbsp;<br />the method is composed of the following main groups of data</p> <ul> <li>Shipment: Main Information of the booking or BL such as external reference, voyage, port of loading, port of discharge, etc ...</li> <li>Container: main information of the container and its moves.</li> </ul>
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param eqpId equipment id (container reference)
	 * @return ApiGetLastCycleMoveFromEquipmentRequest
	 */
	GetLastCycleMoveFromEquipment(ctx _context.Context, eqpId string) ApiGetLastCycleMoveFromEquipmentRequest

	/*
	 * GetLastCycleMoveFromEquipmentExecute executes the request
	 * @return Shipment
	 */
	GetLastCycleMoveFromEquipmentExecute(r ApiGetLastCycleMoveFromEquipmentRequest) (Shipment, *_nethttp.Response, error)

	/*
	 * GetMoveOnCommercialCycleFromShipment all moves information related to all containers of a shipment
	 * <p>This method returns for a commercial cycle an overview of the shipment information, the route and all container moves.&nbsp;<br />the method&nbsp; is composed of the following main groups of data</p> <ul> <li>Shipment: Main Information of the booking or BL such as external reference, voyage, port of loading, port of discharge, etc ..</li> <li>Route: the diff&eacute;rent&nbsp; journey legs&nbsp;</li> <li>Container: main information of the container and its moves.</li> </ul>
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param shipmentRef shipment reference (booking reference or BL number)
	 * @return ApiGetMoveOnCommercialCycleFromShipmentRequest
	 */
	GetMoveOnCommercialCycleFromShipment(ctx _context.Context, shipmentRef string) ApiGetMoveOnCommercialCycleFromShipmentRequest

	/*
	 * GetMoveOnCommercialCycleFromShipmentExecute executes the request
	 * @return Shipment
	 */
	GetMoveOnCommercialCycleFromShipmentExecute(r ApiGetMoveOnCommercialCycleFromShipmentRequest) (Shipment, *_nethttp.Response, error)

	/*
	 * GetMoveOnCommercialCycleFromShipmentAndEquipmentId all moves information related to a container of a shipment
	 * <p>This method returns for a commercial cycle and a container an overview of the shipment information, the route and all container moves.&nbsp;<br />the method&nbsp; is composed of the following main groups of data</p> <ul> <li>Shipment: Main Information of the booking or BL such as external reference, voyage, port of loading, port of discharge, etc ..</li> <li>Route: the diff&eacute;rent&nbsp; journey legs&nbsp;</li> <li>Container: main information of the container and its moves.</li> </ul>
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param shipmentRef shipment reference (booking reference or BL number)
	 * @param eqpId equipment id (container reference)
	 * @return ApiGetMoveOnCommercialCycleFromShipmentAndEquipmentIdRequest
	 */
	GetMoveOnCommercialCycleFromShipmentAndEquipmentId(ctx _context.Context, shipmentRef string, eqpId string) ApiGetMoveOnCommercialCycleFromShipmentAndEquipmentIdRequest

	/*
	 * GetMoveOnCommercialCycleFromShipmentAndEquipmentIdExecute executes the request
	 * @return Shipment
	 */
	GetMoveOnCommercialCycleFromShipmentAndEquipmentIdExecute(r ApiGetMoveOnCommercialCycleFromShipmentAndEquipmentIdRequest) (Shipment, *_nethttp.Response, error)
}

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiGetLastCycleMoveFromEquipmentRequest struct {
	ctx _context.Context
	ApiService DefaultApi
	eqpId string
}


func (r ApiGetLastCycleMoveFromEquipmentRequest) Execute() (Shipment, *_nethttp.Response, error) {
	return r.ApiService.GetLastCycleMoveFromEquipmentExecute(r)
}

/*
 * GetLastCycleMoveFromEquipment all moves information related to a container of its last cycle
 * <p>This method returns for a container all moves of its last cycle.&nbsp;<br />the method is composed of the following main groups of data</p> <ul> <li>Shipment: Main Information of the booking or BL such as external reference, voyage, port of loading, port of discharge, etc ...</li> <li>Container: main information of the container and its moves.</li> </ul>
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param eqpId equipment id (container reference)
 * @return ApiGetLastCycleMoveFromEquipmentRequest
 */
func (a *DefaultApiService) GetLastCycleMoveFromEquipment(ctx _context.Context, eqpId string) ApiGetLastCycleMoveFromEquipmentRequest {
	return ApiGetLastCycleMoveFromEquipmentRequest{
		ApiService: a,
		ctx: ctx,
		eqpId: eqpId,
	}
}

/*
 * Execute executes the request
 * @return Shipment
 */
func (a *DefaultApiService) GetLastCycleMoveFromEquipmentExecute(r ApiGetLastCycleMoveFromEquipmentRequest) (Shipment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Shipment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetLastCycleMoveFromEquipment")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/equipments/{eqpId}/moves/lastCycle"
	localVarPath = strings.Replace(localVarPath, "{"+"eqpId"+"}", _neturl.PathEscape(parameterToString(r.eqpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["API Key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["KeyId"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMoveOnCommercialCycleFromShipmentRequest struct {
	ctx _context.Context
	ApiService DefaultApi
	shipmentRef string
}


func (r ApiGetMoveOnCommercialCycleFromShipmentRequest) Execute() (Shipment, *_nethttp.Response, error) {
	return r.ApiService.GetMoveOnCommercialCycleFromShipmentExecute(r)
}

/*
 * GetMoveOnCommercialCycleFromShipment all moves information related to all containers of a shipment
 * <p>This method returns for a commercial cycle an overview of the shipment information, the route and all container moves.&nbsp;<br />the method&nbsp; is composed of the following main groups of data</p> <ul> <li>Shipment: Main Information of the booking or BL such as external reference, voyage, port of loading, port of discharge, etc ..</li> <li>Route: the diff&eacute;rent&nbsp; journey legs&nbsp;</li> <li>Container: main information of the container and its moves.</li> </ul>
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param shipmentRef shipment reference (booking reference or BL number)
 * @return ApiGetMoveOnCommercialCycleFromShipmentRequest
 */
func (a *DefaultApiService) GetMoveOnCommercialCycleFromShipment(ctx _context.Context, shipmentRef string) ApiGetMoveOnCommercialCycleFromShipmentRequest {
	return ApiGetMoveOnCommercialCycleFromShipmentRequest{
		ApiService: a,
		ctx: ctx,
		shipmentRef: shipmentRef,
	}
}

/*
 * Execute executes the request
 * @return Shipment
 */
func (a *DefaultApiService) GetMoveOnCommercialCycleFromShipmentExecute(r ApiGetMoveOnCommercialCycleFromShipmentRequest) (Shipment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Shipment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetMoveOnCommercialCycleFromShipment")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shipments/{shipmentRef}/equipments/moves/commercialCycle"
	localVarPath = strings.Replace(localVarPath, "{"+"shipmentRef"+"}", _neturl.PathEscape(parameterToString(r.shipmentRef, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["API Key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["KeyId"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMoveOnCommercialCycleFromShipmentAndEquipmentIdRequest struct {
	ctx _context.Context
	ApiService DefaultApi
	shipmentRef string
	eqpId string
}


func (r ApiGetMoveOnCommercialCycleFromShipmentAndEquipmentIdRequest) Execute() (Shipment, *_nethttp.Response, error) {
	return r.ApiService.GetMoveOnCommercialCycleFromShipmentAndEquipmentIdExecute(r)
}

/*
 * GetMoveOnCommercialCycleFromShipmentAndEquipmentId all moves information related to a container of a shipment
 * <p>This method returns for a commercial cycle and a container an overview of the shipment information, the route and all container moves.&nbsp;<br />the method&nbsp; is composed of the following main groups of data</p> <ul> <li>Shipment: Main Information of the booking or BL such as external reference, voyage, port of loading, port of discharge, etc ..</li> <li>Route: the diff&eacute;rent&nbsp; journey legs&nbsp;</li> <li>Container: main information of the container and its moves.</li> </ul>
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param shipmentRef shipment reference (booking reference or BL number)
 * @param eqpId equipment id (container reference)
 * @return ApiGetMoveOnCommercialCycleFromShipmentAndEquipmentIdRequest
 */
func (a *DefaultApiService) GetMoveOnCommercialCycleFromShipmentAndEquipmentId(ctx _context.Context, shipmentRef string, eqpId string) ApiGetMoveOnCommercialCycleFromShipmentAndEquipmentIdRequest {
	return ApiGetMoveOnCommercialCycleFromShipmentAndEquipmentIdRequest{
		ApiService: a,
		ctx: ctx,
		shipmentRef: shipmentRef,
		eqpId: eqpId,
	}
}

/*
 * Execute executes the request
 * @return Shipment
 */
func (a *DefaultApiService) GetMoveOnCommercialCycleFromShipmentAndEquipmentIdExecute(r ApiGetMoveOnCommercialCycleFromShipmentAndEquipmentIdRequest) (Shipment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Shipment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetMoveOnCommercialCycleFromShipmentAndEquipmentId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shipments/{shipmentRef}/equipments/{eqpId}/moves/commercialCycle"
	localVarPath = strings.Replace(localVarPath, "{"+"shipmentRef"+"}", _neturl.PathEscape(parameterToString(r.shipmentRef, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eqpId"+"}", _neturl.PathEscape(parameterToString(r.eqpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["API Key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["KeyId"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
