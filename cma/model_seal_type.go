/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org. For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.0.3
Contact: ho.support-api@cma-cgm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cma

import (
	"encoding/json"
	"fmt"
)

// SealType The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity. - KLP (Keyless padlock) - BLT (Bolt) - WIR (Wire)
type SealType string

// List of sealType
const (
	KLP SealType = "KLP"
	BLT SealType = "BLT"
	WIR SealType = "WIR"
)

// All allowed values of SealType enum
var AllowedSealTypeEnumValues = []SealType{
	"KLP",
	"BLT",
	"WIR",
}

func (v *SealType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SealType(value)
	for _, existing := range AllowedSealTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SealType", value)
}

// NewSealTypeFromValue returns a pointer to a valid SealType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSealTypeFromValue(v string) (*SealType, error) {
	ev := SealType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SealType: valid values are %v", v, AllowedSealTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SealType) IsValid() bool {
	for _, existing := range AllowedSealTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to sealType value
func (v SealType) Ptr() *SealType {
	return &v
}

type NullableSealType struct {
	value *SealType
	isSet bool
}

func (v NullableSealType) Get() *SealType {
	return v.value
}

func (v *NullableSealType) Set(val *SealType) {
	v.value = val
	v.isSet = true
}

func (v NullableSealType) IsSet() bool {
	return v.isSet
}

func (v *NullableSealType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSealType(val *SealType) *NullableSealType {
	return &NullableSealType{value: val, isSet: true}
}

func (v NullableSealType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSealType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

