/*
 * logistic.tracking.v1
 *
 * Retrieve tracking data about your cargo using container number, booking number or bill of lading.
 *
 * API version: 1.4.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cma

import (
	"encoding/json"
)

// CodeAndName struct for CodeAndName
type CodeAndName struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewCodeAndName instantiates a new CodeAndName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeAndName() *CodeAndName {
	this := CodeAndName{}
	return &this
}

// NewCodeAndNameWithDefaults instantiates a new CodeAndName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeAndNameWithDefaults() *CodeAndName {
	this := CodeAndName{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CodeAndName) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeAndName) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CodeAndName) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CodeAndName) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CodeAndName) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeAndName) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CodeAndName) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CodeAndName) SetName(v string) {
	o.Name = &v
}

func (o CodeAndName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableCodeAndName struct {
	value *CodeAndName
	isSet bool
}

func (v NullableCodeAndName) Get() *CodeAndName {
	return v.value
}

func (v *NullableCodeAndName) Set(val *CodeAndName) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeAndName) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeAndName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeAndName(val *CodeAndName) *NullableCodeAndName {
	return &NullableCodeAndName{value: val, isSet: true}
}

func (v NullableCodeAndName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeAndName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


