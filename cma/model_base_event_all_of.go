/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org. For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.0.3
Contact: ho.support-api@cma-cgm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cma

import (
	"encoding/json"
)

// BaseEventAllOf struct for BaseEventAllOf
type BaseEventAllOf struct {
	// The unique identifier for the event (the message - not the source). <b>NB</b>&#58; This field should be considered Metadata
	EventID *string `json:"eventID,omitempty"`
}

// NewBaseEventAllOf instantiates a new BaseEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEventAllOf() *BaseEventAllOf {
	this := BaseEventAllOf{}
	return &this
}

// NewBaseEventAllOfWithDefaults instantiates a new BaseEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEventAllOfWithDefaults() *BaseEventAllOf {
	this := BaseEventAllOf{}
	return &this
}

// GetEventID returns the EventID field value if set, zero value otherwise.
func (o *BaseEventAllOf) GetEventID() string {
	if o == nil || o.EventID == nil {
		var ret string
		return ret
	}
	return *o.EventID
}

// GetEventIDOk returns a tuple with the EventID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEventAllOf) GetEventIDOk() (*string, bool) {
	if o == nil || o.EventID == nil {
		return nil, false
	}
	return o.EventID, true
}

// HasEventID returns a boolean if a field has been set.
func (o *BaseEventAllOf) HasEventID() bool {
	if o != nil && o.EventID != nil {
		return true
	}

	return false
}

// SetEventID gets a reference to the given string and assigns it to the EventID field.
func (o *BaseEventAllOf) SetEventID(v string) {
	o.EventID = &v
}

func (o BaseEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventID != nil {
		toSerialize["eventID"] = o.EventID
	}
	return json.Marshal(toSerialize)
}

type NullableBaseEventAllOf struct {
	value *BaseEventAllOf
	isSet bool
}

func (v NullableBaseEventAllOf) Get() *BaseEventAllOf {
	return v.value
}

func (v *NullableBaseEventAllOf) Set(val *BaseEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEventAllOf(val *BaseEventAllOf) *NullableBaseEventAllOf {
	return &NullableBaseEventAllOf{value: val, isSet: true}
}

func (v NullableBaseEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


