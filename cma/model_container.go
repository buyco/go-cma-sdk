/*
 * logistic.tracking.v1
 *
 * Retrieve tracking data about your cargo using container number, booking number or bill of lading.
 *
 * API version: 1.4.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cma

import (
	"encoding/json"
)

// Container struct for Container
type Container struct {
	// Container ID
	Id *string `json:"id,omitempty"`
	// Size in TEU
	Size *int32 `json:"size,omitempty"`
	// Empty return depot
	EmptyReturnDepot *string `json:"emptyReturnDepot,omitempty"`
	// type of the container such as ST, ..
	Type *string `json:"type,omitempty"`
	Movements *[]Movement `json:"movements,omitempty"`
}

// NewContainer instantiates a new Container object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainer() *Container {
	this := Container{}
	return &this
}

// NewContainerWithDefaults instantiates a new Container object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerWithDefaults() *Container {
	this := Container{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Container) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Container) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Container) SetId(v string) {
	o.Id = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Container) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Container) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *Container) SetSize(v int32) {
	o.Size = &v
}

// GetEmptyReturnDepot returns the EmptyReturnDepot field value if set, zero value otherwise.
func (o *Container) GetEmptyReturnDepot() string {
	if o == nil || o.EmptyReturnDepot == nil {
		var ret string
		return ret
	}
	return *o.EmptyReturnDepot
}

// GetEmptyReturnDepotOk returns a tuple with the EmptyReturnDepot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetEmptyReturnDepotOk() (*string, bool) {
	if o == nil || o.EmptyReturnDepot == nil {
		return nil, false
	}
	return o.EmptyReturnDepot, true
}

// HasEmptyReturnDepot returns a boolean if a field has been set.
func (o *Container) HasEmptyReturnDepot() bool {
	if o != nil && o.EmptyReturnDepot != nil {
		return true
	}

	return false
}

// SetEmptyReturnDepot gets a reference to the given string and assigns it to the EmptyReturnDepot field.
func (o *Container) SetEmptyReturnDepot(v string) {
	o.EmptyReturnDepot = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Container) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Container) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Container) SetType(v string) {
	o.Type = &v
}

// GetMovements returns the Movements field value if set, zero value otherwise.
func (o *Container) GetMovements() []Movement {
	if o == nil || o.Movements == nil {
		var ret []Movement
		return ret
	}
	return *o.Movements
}

// GetMovementsOk returns a tuple with the Movements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetMovementsOk() (*[]Movement, bool) {
	if o == nil || o.Movements == nil {
		return nil, false
	}
	return o.Movements, true
}

// HasMovements returns a boolean if a field has been set.
func (o *Container) HasMovements() bool {
	if o != nil && o.Movements != nil {
		return true
	}

	return false
}

// SetMovements gets a reference to the given []Movement and assigns it to the Movements field.
func (o *Container) SetMovements(v []Movement) {
	o.Movements = &v
}

func (o Container) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.EmptyReturnDepot != nil {
		toSerialize["emptyReturnDepot"] = o.EmptyReturnDepot
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Movements != nil {
		toSerialize["movements"] = o.Movements
	}
	return json.Marshal(toSerialize)
}

type NullableContainer struct {
	value *Container
	isSet bool
}

func (v NullableContainer) Get() *Container {
	return v.value
}

func (v *NullableContainer) Set(val *Container) {
	v.value = val
	v.isSet = true
}

func (v NullableContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainer(val *Container) *NullableContainer {
	return &NullableContainer{value: val, isSet: true}
}

func (v NullableContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


