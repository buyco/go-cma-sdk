/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org.  <i>Please note that shipment events and subscription management are not covered yet by CMA CGM API.</i>  <br> This API is accessible through <ul> <li> <b> Public </b> connection (authentication with API Key): this allows to retrieve standard equipment moves (e.g. ready to be loaded, discharged), Transhipment moves (e.g. discharged and re-loaded onboard) and planned vessel departure and arrival dates. </li> <li> <b> Private </b> connection (authentication with Oauth2 client credentials): this allows to retrieve additional private events such as actual rail and ramp moves, planned departure and arrival dates for inland moves. These private events are available only if you (or your end customer) are identified on the booking as: Booking Party, Deciding Party, Consignee, Notifier or Shipper. </li> </ul> </br> For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.2.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SubscriptionRule struct for SubscriptionRule
type SubscriptionRule struct {
	// List of equipment references
	EquipmentReferences []string `json:"equipmentReferences,omitempty"`
	// List of vas
	Vas []string `json:"vas,omitempty"`
	// List of shipment references
	ShipmentReferences []string `json:"shipmentReferences,omitempty"`
	// List of contract references
	ContractReferences []string `json:"contractReferences,omitempty"`
	// <br> List of (serviceCode only OR serviceCode + shippingCompany) OR carrierServiceCode to create.</br> Either serviceCode OR carrierServiceCode should be set per cvs service rule.</br> If serviceCode only is provided => the subscription will be applied to the service code only. If serviceCode + shippingCompany is provided => the subscription will be applied to the carrier service code of the specified shippingCompany. If carrierServiceCode is provided => the subscription will be applied to the carrier service code.
	CvsServices []CvsService `json:"cvsServices,omitempty"`
	// Dedicated channel where the booking request is submitted, allowed values -> API, WEB, INTTRA_ACT, INTTRA_LINK
	ElectronicChannel *string `json:"electronicChannel,omitempty"`
	// Start date of the subscription. By default, today
	StartDate *string `json:"startDate,omitempty"`
	// End date of the subscription. By default, today + 120 days / today + 365 days for electronic channel
	EndDate *string `json:"endDate,omitempty"`
}

// NewSubscriptionRule instantiates a new SubscriptionRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionRule() *SubscriptionRule {
	this := SubscriptionRule{}
	return &this
}

// NewSubscriptionRuleWithDefaults instantiates a new SubscriptionRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionRuleWithDefaults() *SubscriptionRule {
	this := SubscriptionRule{}
	return &this
}

// GetEquipmentReferences returns the EquipmentReferences field value if set, zero value otherwise.
func (o *SubscriptionRule) GetEquipmentReferences() []string {
	if o == nil || o.EquipmentReferences == nil {
		var ret []string
		return ret
	}
	return o.EquipmentReferences
}

// GetEquipmentReferencesOk returns a tuple with the EquipmentReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRule) GetEquipmentReferencesOk() ([]string, bool) {
	if o == nil || o.EquipmentReferences == nil {
		return nil, false
	}
	return o.EquipmentReferences, true
}

// HasEquipmentReferences returns a boolean if a field has been set.
func (o *SubscriptionRule) HasEquipmentReferences() bool {
	if o != nil && o.EquipmentReferences != nil {
		return true
	}

	return false
}

// SetEquipmentReferences gets a reference to the given []string and assigns it to the EquipmentReferences field.
func (o *SubscriptionRule) SetEquipmentReferences(v []string) {
	o.EquipmentReferences = v
}

// GetVas returns the Vas field value if set, zero value otherwise.
func (o *SubscriptionRule) GetVas() []string {
	if o == nil || o.Vas == nil {
		var ret []string
		return ret
	}
	return o.Vas
}

// GetVasOk returns a tuple with the Vas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRule) GetVasOk() ([]string, bool) {
	if o == nil || o.Vas == nil {
		return nil, false
	}
	return o.Vas, true
}

// HasVas returns a boolean if a field has been set.
func (o *SubscriptionRule) HasVas() bool {
	if o != nil && o.Vas != nil {
		return true
	}

	return false
}

// SetVas gets a reference to the given []string and assigns it to the Vas field.
func (o *SubscriptionRule) SetVas(v []string) {
	o.Vas = v
}

// GetShipmentReferences returns the ShipmentReferences field value if set, zero value otherwise.
func (o *SubscriptionRule) GetShipmentReferences() []string {
	if o == nil || o.ShipmentReferences == nil {
		var ret []string
		return ret
	}
	return o.ShipmentReferences
}

// GetShipmentReferencesOk returns a tuple with the ShipmentReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRule) GetShipmentReferencesOk() ([]string, bool) {
	if o == nil || o.ShipmentReferences == nil {
		return nil, false
	}
	return o.ShipmentReferences, true
}

// HasShipmentReferences returns a boolean if a field has been set.
func (o *SubscriptionRule) HasShipmentReferences() bool {
	if o != nil && o.ShipmentReferences != nil {
		return true
	}

	return false
}

// SetShipmentReferences gets a reference to the given []string and assigns it to the ShipmentReferences field.
func (o *SubscriptionRule) SetShipmentReferences(v []string) {
	o.ShipmentReferences = v
}

// GetContractReferences returns the ContractReferences field value if set, zero value otherwise.
func (o *SubscriptionRule) GetContractReferences() []string {
	if o == nil || o.ContractReferences == nil {
		var ret []string
		return ret
	}
	return o.ContractReferences
}

// GetContractReferencesOk returns a tuple with the ContractReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRule) GetContractReferencesOk() ([]string, bool) {
	if o == nil || o.ContractReferences == nil {
		return nil, false
	}
	return o.ContractReferences, true
}

// HasContractReferences returns a boolean if a field has been set.
func (o *SubscriptionRule) HasContractReferences() bool {
	if o != nil && o.ContractReferences != nil {
		return true
	}

	return false
}

// SetContractReferences gets a reference to the given []string and assigns it to the ContractReferences field.
func (o *SubscriptionRule) SetContractReferences(v []string) {
	o.ContractReferences = v
}

// GetCvsServices returns the CvsServices field value if set, zero value otherwise.
func (o *SubscriptionRule) GetCvsServices() []CvsService {
	if o == nil || o.CvsServices == nil {
		var ret []CvsService
		return ret
	}
	return o.CvsServices
}

// GetCvsServicesOk returns a tuple with the CvsServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRule) GetCvsServicesOk() ([]CvsService, bool) {
	if o == nil || o.CvsServices == nil {
		return nil, false
	}
	return o.CvsServices, true
}

// HasCvsServices returns a boolean if a field has been set.
func (o *SubscriptionRule) HasCvsServices() bool {
	if o != nil && o.CvsServices != nil {
		return true
	}

	return false
}

// SetCvsServices gets a reference to the given []CvsService and assigns it to the CvsServices field.
func (o *SubscriptionRule) SetCvsServices(v []CvsService) {
	o.CvsServices = v
}

// GetElectronicChannel returns the ElectronicChannel field value if set, zero value otherwise.
func (o *SubscriptionRule) GetElectronicChannel() string {
	if o == nil || o.ElectronicChannel == nil {
		var ret string
		return ret
	}
	return *o.ElectronicChannel
}

// GetElectronicChannelOk returns a tuple with the ElectronicChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRule) GetElectronicChannelOk() (*string, bool) {
	if o == nil || o.ElectronicChannel == nil {
		return nil, false
	}
	return o.ElectronicChannel, true
}

// HasElectronicChannel returns a boolean if a field has been set.
func (o *SubscriptionRule) HasElectronicChannel() bool {
	if o != nil && o.ElectronicChannel != nil {
		return true
	}

	return false
}

// SetElectronicChannel gets a reference to the given string and assigns it to the ElectronicChannel field.
func (o *SubscriptionRule) SetElectronicChannel(v string) {
	o.ElectronicChannel = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *SubscriptionRule) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRule) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *SubscriptionRule) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *SubscriptionRule) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *SubscriptionRule) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRule) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *SubscriptionRule) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *SubscriptionRule) SetEndDate(v string) {
	o.EndDate = &v
}

func (o SubscriptionRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EquipmentReferences != nil {
		toSerialize["equipmentReferences"] = o.EquipmentReferences
	}
	if o.Vas != nil {
		toSerialize["vas"] = o.Vas
	}
	if o.ShipmentReferences != nil {
		toSerialize["shipmentReferences"] = o.ShipmentReferences
	}
	if o.ContractReferences != nil {
		toSerialize["contractReferences"] = o.ContractReferences
	}
	if o.CvsServices != nil {
		toSerialize["cvsServices"] = o.CvsServices
	}
	if o.ElectronicChannel != nil {
		toSerialize["electronicChannel"] = o.ElectronicChannel
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionRule struct {
	value *SubscriptionRule
	isSet bool
}

func (v NullableSubscriptionRule) Get() *SubscriptionRule {
	return v.value
}

func (v *NullableSubscriptionRule) Set(val *SubscriptionRule) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionRule) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionRule(val *SubscriptionRule) *NullableSubscriptionRule {
	return &NullableSubscriptionRule{value: val, isSet: true}
}

func (v NullableSubscriptionRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
