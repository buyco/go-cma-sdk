/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org.  <i>Please note that shipment events and subscription management are not covered yet by CMA CGM API.</i>  <br> This API is accessible through <ul> <li> <b> Public </b> connection (authentication with API Key): this allows to retrieve standard equipment moves (e.g. ready to be loaded, discharged), Transhipment moves (e.g. discharged and re-loaded onboard) and planned vessel departure and arrival dates. </li> <li> <b> Private </b> connection (authentication with Oauth2 client credentials): this allows to retrieve additional private events such as actual rail and ramp moves, planned departure and arrival dates for inland moves. These private events are available only if you (or your end customer) are identified on the booking as: Booking Party, Deciding Party, Consignee, Notifier or Shipper. </li> </ul> </br> For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.2.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SealAllOf2 struct for SealAllOf2
type SealAllOf2 struct {
	SealType *SealType `json:"sealType,omitempty"`
}

// NewSealAllOf2 instantiates a new SealAllOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSealAllOf2() *SealAllOf2 {
	this := SealAllOf2{}
	return &this
}

// NewSealAllOf2WithDefaults instantiates a new SealAllOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSealAllOf2WithDefaults() *SealAllOf2 {
	this := SealAllOf2{}
	return &this
}

// GetSealType returns the SealType field value if set, zero value otherwise.
func (o *SealAllOf2) GetSealType() SealType {
	if o == nil || o.SealType == nil {
		var ret SealType
		return ret
	}
	return *o.SealType
}

// GetSealTypeOk returns a tuple with the SealType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SealAllOf2) GetSealTypeOk() (*SealType, bool) {
	if o == nil || o.SealType == nil {
		return nil, false
	}
	return o.SealType, true
}

// HasSealType returns a boolean if a field has been set.
func (o *SealAllOf2) HasSealType() bool {
	if o != nil && o.SealType != nil {
		return true
	}

	return false
}

// SetSealType gets a reference to the given SealType and assigns it to the SealType field.
func (o *SealAllOf2) SetSealType(v SealType) {
	o.SealType = &v
}

func (o SealAllOf2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SealType != nil {
		toSerialize["sealType"] = o.SealType
	}
	return json.Marshal(toSerialize)
}

type NullableSealAllOf2 struct {
	value *SealAllOf2
	isSet bool
}

func (v NullableSealAllOf2) Get() *SealAllOf2 {
	return v.value
}

func (v *NullableSealAllOf2) Set(val *SealAllOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableSealAllOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableSealAllOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSealAllOf2(val *SealAllOf2) *NullableSealAllOf2 {
	return &NullableSealAllOf2{value: val, isSet: true}
}

func (v NullableSealAllOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSealAllOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
