/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org.  <i>Please note that shipment events and subscription management are not covered yet by CMA CGM API.</i>  <br> This API is accessible through <ul> <li> <b> Public </b> connection (authentication with API Key): this allows to retrieve standard equipment moves (e.g. ready to be loaded, discharged), Transhipment moves (e.g. discharged and re-loaded onboard) and planned vessel departure and arrival dates. </li> <li> <b> Private </b> connection (authentication with Oauth2 client credentials): this allows to retrieve additional private events such as actual rail and ramp moves, planned departure and arrival dates for inland moves. These private events are available only if you (or your end customer) are identified on the booking as: Booking Party, Deciding Party, Consignee, Notifier or Shipper. </li> </ul> </br> For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.2.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CvsService struct for CvsService
type CvsService struct {
	// Service code of voyage
	ServiceCode *string `json:"serviceCode,omitempty"`
	// Service code for a shipping company
	CarrierServiceCode *string `json:"carrierServiceCode,omitempty"`
	// Shipping company code
	ShippingCompany *string `json:"shippingCompany,omitempty"`
	// Start date of the service subscription. By default, today
	ServiceStartDate *string `json:"serviceStartDate,omitempty"`
	// End date of the service subscription. By default, today + 1 year
	ServiceEndDate *string `json:"serviceEndDate,omitempty"`
}

// NewCvsService instantiates a new CvsService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCvsService() *CvsService {
	this := CvsService{}
	return &this
}

// NewCvsServiceWithDefaults instantiates a new CvsService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCvsServiceWithDefaults() *CvsService {
	this := CvsService{}
	return &this
}

// GetServiceCode returns the ServiceCode field value if set, zero value otherwise.
func (o *CvsService) GetServiceCode() string {
	if o == nil || o.ServiceCode == nil {
		var ret string
		return ret
	}
	return *o.ServiceCode
}

// GetServiceCodeOk returns a tuple with the ServiceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CvsService) GetServiceCodeOk() (*string, bool) {
	if o == nil || o.ServiceCode == nil {
		return nil, false
	}
	return o.ServiceCode, true
}

// HasServiceCode returns a boolean if a field has been set.
func (o *CvsService) HasServiceCode() bool {
	if o != nil && o.ServiceCode != nil {
		return true
	}

	return false
}

// SetServiceCode gets a reference to the given string and assigns it to the ServiceCode field.
func (o *CvsService) SetServiceCode(v string) {
	o.ServiceCode = &v
}

// GetCarrierServiceCode returns the CarrierServiceCode field value if set, zero value otherwise.
func (o *CvsService) GetCarrierServiceCode() string {
	if o == nil || o.CarrierServiceCode == nil {
		var ret string
		return ret
	}
	return *o.CarrierServiceCode
}

// GetCarrierServiceCodeOk returns a tuple with the CarrierServiceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CvsService) GetCarrierServiceCodeOk() (*string, bool) {
	if o == nil || o.CarrierServiceCode == nil {
		return nil, false
	}
	return o.CarrierServiceCode, true
}

// HasCarrierServiceCode returns a boolean if a field has been set.
func (o *CvsService) HasCarrierServiceCode() bool {
	if o != nil && o.CarrierServiceCode != nil {
		return true
	}

	return false
}

// SetCarrierServiceCode gets a reference to the given string and assigns it to the CarrierServiceCode field.
func (o *CvsService) SetCarrierServiceCode(v string) {
	o.CarrierServiceCode = &v
}

// GetShippingCompany returns the ShippingCompany field value if set, zero value otherwise.
func (o *CvsService) GetShippingCompany() string {
	if o == nil || o.ShippingCompany == nil {
		var ret string
		return ret
	}
	return *o.ShippingCompany
}

// GetShippingCompanyOk returns a tuple with the ShippingCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CvsService) GetShippingCompanyOk() (*string, bool) {
	if o == nil || o.ShippingCompany == nil {
		return nil, false
	}
	return o.ShippingCompany, true
}

// HasShippingCompany returns a boolean if a field has been set.
func (o *CvsService) HasShippingCompany() bool {
	if o != nil && o.ShippingCompany != nil {
		return true
	}

	return false
}

// SetShippingCompany gets a reference to the given string and assigns it to the ShippingCompany field.
func (o *CvsService) SetShippingCompany(v string) {
	o.ShippingCompany = &v
}

// GetServiceStartDate returns the ServiceStartDate field value if set, zero value otherwise.
func (o *CvsService) GetServiceStartDate() string {
	if o == nil || o.ServiceStartDate == nil {
		var ret string
		return ret
	}
	return *o.ServiceStartDate
}

// GetServiceStartDateOk returns a tuple with the ServiceStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CvsService) GetServiceStartDateOk() (*string, bool) {
	if o == nil || o.ServiceStartDate == nil {
		return nil, false
	}
	return o.ServiceStartDate, true
}

// HasServiceStartDate returns a boolean if a field has been set.
func (o *CvsService) HasServiceStartDate() bool {
	if o != nil && o.ServiceStartDate != nil {
		return true
	}

	return false
}

// SetServiceStartDate gets a reference to the given string and assigns it to the ServiceStartDate field.
func (o *CvsService) SetServiceStartDate(v string) {
	o.ServiceStartDate = &v
}

// GetServiceEndDate returns the ServiceEndDate field value if set, zero value otherwise.
func (o *CvsService) GetServiceEndDate() string {
	if o == nil || o.ServiceEndDate == nil {
		var ret string
		return ret
	}
	return *o.ServiceEndDate
}

// GetServiceEndDateOk returns a tuple with the ServiceEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CvsService) GetServiceEndDateOk() (*string, bool) {
	if o == nil || o.ServiceEndDate == nil {
		return nil, false
	}
	return o.ServiceEndDate, true
}

// HasServiceEndDate returns a boolean if a field has been set.
func (o *CvsService) HasServiceEndDate() bool {
	if o != nil && o.ServiceEndDate != nil {
		return true
	}

	return false
}

// SetServiceEndDate gets a reference to the given string and assigns it to the ServiceEndDate field.
func (o *CvsService) SetServiceEndDate(v string) {
	o.ServiceEndDate = &v
}

func (o CvsService) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ServiceCode != nil {
		toSerialize["serviceCode"] = o.ServiceCode
	}
	if o.CarrierServiceCode != nil {
		toSerialize["carrierServiceCode"] = o.CarrierServiceCode
	}
	if o.ShippingCompany != nil {
		toSerialize["shippingCompany"] = o.ShippingCompany
	}
	if o.ServiceStartDate != nil {
		toSerialize["serviceStartDate"] = o.ServiceStartDate
	}
	if o.ServiceEndDate != nil {
		toSerialize["serviceEndDate"] = o.ServiceEndDate
	}
	return json.Marshal(toSerialize)
}

type NullableCvsService struct {
	value *CvsService
	isSet bool
}

func (v NullableCvsService) Get() *CvsService {
	return v.value
}

func (v *NullableCvsService) Set(val *CvsService) {
	v.value = val
	v.isSet = true
}

func (v NullableCvsService) IsSet() bool {
	return v.isSet
}

func (v *NullableCvsService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCvsService(val *CvsService) *NullableCvsService {
	return &NullableCvsService{value: val, isSet: true}
}

func (v NullableCvsService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCvsService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
