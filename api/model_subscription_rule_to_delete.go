/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org.  <i>Please note that shipment events and subscription management are not covered yet by CMA CGM API.</i>  <br> This API is accessible through <ul> <li> <b> Public </b> connection (authentication with API Key): this allows to retrieve standard equipment moves (e.g. ready to be loaded, discharged), Transhipment moves (e.g. discharged and re-loaded onboard) and planned vessel departure and arrival dates. </li> <li> <b> Private </b> connection (authentication with Oauth2 client credentials): this allows to retrieve additional private events such as actual rail and ramp moves, planned departure and arrival dates for inland moves. These private events are available only if you (or your end customer) are identified on the booking as: Booking Party, Deciding Party, Consignee, Notifier or Shipper. </li> </ul> </br> For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.2.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SubscriptionRuleToDelete struct for SubscriptionRuleToDelete
type SubscriptionRuleToDelete struct {
	// <br> List of (serviceCode only OR serviceCode + shippingCompany) OR carrierServiceCode to delete.</br> Either serviceCode OR carrierServiceCode should be set per cvs service rule.</br> If serviceCode only is provided => the unsubscription will be applied to the service code only. If serviceCode + shippingCompany is provided => the unsubscription will be applied to the carrier service code of the specified shippingCompany. If carrierServiceCode is provided => the unsubscription will be applied to the carrier service code.
	CvsServicesToDelete []CvsServiceToDelete `json:"cvsServicesToDelete,omitempty"`
	// List of equipment references
	EquipmentReferences []string `json:"equipmentReferences,omitempty"`
	// List of shipment references
	ShipmentReferences []string `json:"shipmentReferences,omitempty"`
	// List of contract references
	ContractReferences []string `json:"contractReferences,omitempty"`
	// List of Dedicated channels
	ElectronicChannels []string `json:"electronicChannels,omitempty"`
}

// NewSubscriptionRuleToDelete instantiates a new SubscriptionRuleToDelete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionRuleToDelete() *SubscriptionRuleToDelete {
	this := SubscriptionRuleToDelete{}
	return &this
}

// NewSubscriptionRuleToDeleteWithDefaults instantiates a new SubscriptionRuleToDelete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionRuleToDeleteWithDefaults() *SubscriptionRuleToDelete {
	this := SubscriptionRuleToDelete{}
	return &this
}

// GetCvsServicesToDelete returns the CvsServicesToDelete field value if set, zero value otherwise.
func (o *SubscriptionRuleToDelete) GetCvsServicesToDelete() []CvsServiceToDelete {
	if o == nil || o.CvsServicesToDelete == nil {
		var ret []CvsServiceToDelete
		return ret
	}
	return o.CvsServicesToDelete
}

// GetCvsServicesToDeleteOk returns a tuple with the CvsServicesToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRuleToDelete) GetCvsServicesToDeleteOk() ([]CvsServiceToDelete, bool) {
	if o == nil || o.CvsServicesToDelete == nil {
		return nil, false
	}
	return o.CvsServicesToDelete, true
}

// HasCvsServicesToDelete returns a boolean if a field has been set.
func (o *SubscriptionRuleToDelete) HasCvsServicesToDelete() bool {
	if o != nil && o.CvsServicesToDelete != nil {
		return true
	}

	return false
}

// SetCvsServicesToDelete gets a reference to the given []CvsServiceToDelete and assigns it to the CvsServicesToDelete field.
func (o *SubscriptionRuleToDelete) SetCvsServicesToDelete(v []CvsServiceToDelete) {
	o.CvsServicesToDelete = v
}

// GetEquipmentReferences returns the EquipmentReferences field value if set, zero value otherwise.
func (o *SubscriptionRuleToDelete) GetEquipmentReferences() []string {
	if o == nil || o.EquipmentReferences == nil {
		var ret []string
		return ret
	}
	return o.EquipmentReferences
}

// GetEquipmentReferencesOk returns a tuple with the EquipmentReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRuleToDelete) GetEquipmentReferencesOk() ([]string, bool) {
	if o == nil || o.EquipmentReferences == nil {
		return nil, false
	}
	return o.EquipmentReferences, true
}

// HasEquipmentReferences returns a boolean if a field has been set.
func (o *SubscriptionRuleToDelete) HasEquipmentReferences() bool {
	if o != nil && o.EquipmentReferences != nil {
		return true
	}

	return false
}

// SetEquipmentReferences gets a reference to the given []string and assigns it to the EquipmentReferences field.
func (o *SubscriptionRuleToDelete) SetEquipmentReferences(v []string) {
	o.EquipmentReferences = v
}

// GetShipmentReferences returns the ShipmentReferences field value if set, zero value otherwise.
func (o *SubscriptionRuleToDelete) GetShipmentReferences() []string {
	if o == nil || o.ShipmentReferences == nil {
		var ret []string
		return ret
	}
	return o.ShipmentReferences
}

// GetShipmentReferencesOk returns a tuple with the ShipmentReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRuleToDelete) GetShipmentReferencesOk() ([]string, bool) {
	if o == nil || o.ShipmentReferences == nil {
		return nil, false
	}
	return o.ShipmentReferences, true
}

// HasShipmentReferences returns a boolean if a field has been set.
func (o *SubscriptionRuleToDelete) HasShipmentReferences() bool {
	if o != nil && o.ShipmentReferences != nil {
		return true
	}

	return false
}

// SetShipmentReferences gets a reference to the given []string and assigns it to the ShipmentReferences field.
func (o *SubscriptionRuleToDelete) SetShipmentReferences(v []string) {
	o.ShipmentReferences = v
}

// GetContractReferences returns the ContractReferences field value if set, zero value otherwise.
func (o *SubscriptionRuleToDelete) GetContractReferences() []string {
	if o == nil || o.ContractReferences == nil {
		var ret []string
		return ret
	}
	return o.ContractReferences
}

// GetContractReferencesOk returns a tuple with the ContractReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRuleToDelete) GetContractReferencesOk() ([]string, bool) {
	if o == nil || o.ContractReferences == nil {
		return nil, false
	}
	return o.ContractReferences, true
}

// HasContractReferences returns a boolean if a field has been set.
func (o *SubscriptionRuleToDelete) HasContractReferences() bool {
	if o != nil && o.ContractReferences != nil {
		return true
	}

	return false
}

// SetContractReferences gets a reference to the given []string and assigns it to the ContractReferences field.
func (o *SubscriptionRuleToDelete) SetContractReferences(v []string) {
	o.ContractReferences = v
}

// GetElectronicChannels returns the ElectronicChannels field value if set, zero value otherwise.
func (o *SubscriptionRuleToDelete) GetElectronicChannels() []string {
	if o == nil || o.ElectronicChannels == nil {
		var ret []string
		return ret
	}
	return o.ElectronicChannels
}

// GetElectronicChannelsOk returns a tuple with the ElectronicChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionRuleToDelete) GetElectronicChannelsOk() ([]string, bool) {
	if o == nil || o.ElectronicChannels == nil {
		return nil, false
	}
	return o.ElectronicChannels, true
}

// HasElectronicChannels returns a boolean if a field has been set.
func (o *SubscriptionRuleToDelete) HasElectronicChannels() bool {
	if o != nil && o.ElectronicChannels != nil {
		return true
	}

	return false
}

// SetElectronicChannels gets a reference to the given []string and assigns it to the ElectronicChannels field.
func (o *SubscriptionRuleToDelete) SetElectronicChannels(v []string) {
	o.ElectronicChannels = v
}

func (o SubscriptionRuleToDelete) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CvsServicesToDelete != nil {
		toSerialize["cvsServicesToDelete"] = o.CvsServicesToDelete
	}
	if o.EquipmentReferences != nil {
		toSerialize["equipmentReferences"] = o.EquipmentReferences
	}
	if o.ShipmentReferences != nil {
		toSerialize["shipmentReferences"] = o.ShipmentReferences
	}
	if o.ContractReferences != nil {
		toSerialize["contractReferences"] = o.ContractReferences
	}
	if o.ElectronicChannels != nil {
		toSerialize["electronicChannels"] = o.ElectronicChannels
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionRuleToDelete struct {
	value *SubscriptionRuleToDelete
	isSet bool
}

func (v NullableSubscriptionRuleToDelete) Get() *SubscriptionRuleToDelete {
	return v.value
}

func (v *NullableSubscriptionRuleToDelete) Set(val *SubscriptionRuleToDelete) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionRuleToDelete) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionRuleToDelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionRuleToDelete(val *SubscriptionRuleToDelete) *NullableSubscriptionRuleToDelete {
	return &NullableSubscriptionRuleToDelete{value: val, isSet: true}
}

func (v NullableSubscriptionRuleToDelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionRuleToDelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
