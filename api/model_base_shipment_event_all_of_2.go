/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org. For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.0.3
Contact: ho.support-api@cma-cgm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// BaseShipmentEventAllOf2 struct for BaseShipmentEventAllOf2
type BaseShipmentEventAllOf2 struct {
	ShipmentEventTypeCode *ShipmentEventTypeCode `json:"shipmentEventTypeCode,omitempty"`
}

// NewBaseShipmentEventAllOf2 instantiates a new BaseShipmentEventAllOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseShipmentEventAllOf2() *BaseShipmentEventAllOf2 {
	this := BaseShipmentEventAllOf2{}
	return &this
}

// NewBaseShipmentEventAllOf2WithDefaults instantiates a new BaseShipmentEventAllOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseShipmentEventAllOf2WithDefaults() *BaseShipmentEventAllOf2 {
	this := BaseShipmentEventAllOf2{}
	return &this
}

// GetShipmentEventTypeCode returns the ShipmentEventTypeCode field value if set, zero value otherwise.
func (o *BaseShipmentEventAllOf2) GetShipmentEventTypeCode() ShipmentEventTypeCode {
	if o == nil || o.ShipmentEventTypeCode == nil {
		var ret ShipmentEventTypeCode
		return ret
	}
	return *o.ShipmentEventTypeCode
}

// GetShipmentEventTypeCodeOk returns a tuple with the ShipmentEventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseShipmentEventAllOf2) GetShipmentEventTypeCodeOk() (*ShipmentEventTypeCode, bool) {
	if o == nil || o.ShipmentEventTypeCode == nil {
		return nil, false
	}
	return o.ShipmentEventTypeCode, true
}

// HasShipmentEventTypeCode returns a boolean if a field has been set.
func (o *BaseShipmentEventAllOf2) HasShipmentEventTypeCode() bool {
	if o != nil && o.ShipmentEventTypeCode != nil {
		return true
	}

	return false
}

// SetShipmentEventTypeCode gets a reference to the given ShipmentEventTypeCode and assigns it to the ShipmentEventTypeCode field.
func (o *BaseShipmentEventAllOf2) SetShipmentEventTypeCode(v ShipmentEventTypeCode) {
	o.ShipmentEventTypeCode = &v
}

func (o BaseShipmentEventAllOf2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ShipmentEventTypeCode != nil {
		toSerialize["shipmentEventTypeCode"] = o.ShipmentEventTypeCode
	}
	return json.Marshal(toSerialize)
}

type NullableBaseShipmentEventAllOf2 struct {
	value *BaseShipmentEventAllOf2
	isSet bool
}

func (v NullableBaseShipmentEventAllOf2) Get() *BaseShipmentEventAllOf2 {
	return v.value
}

func (v *NullableBaseShipmentEventAllOf2) Set(val *BaseShipmentEventAllOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseShipmentEventAllOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseShipmentEventAllOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseShipmentEventAllOf2(val *BaseShipmentEventAllOf2) *NullableBaseShipmentEventAllOf2 {
	return &NullableBaseShipmentEventAllOf2{value: val, isSet: true}
}

func (v NullableBaseShipmentEventAllOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseShipmentEventAllOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


