/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org.  <i>Please note that shipment events and subscription management are not covered yet by CMA CGM API.</i>  <br> This API is accessible through <ul> <li> <b> Public </b> connection (authentication with API Key): this allows to retrieve standard equipment moves (e.g. ready to be loaded, discharged), Transhipment moves (e.g. discharged and re-loaded onboard) and planned vessel departure and arrival dates. </li> <li> <b> Private </b> connection (authentication with Oauth2 client credentials): this allows to retrieve additional private events such as actual rail and ramp moves, planned departure and arrival dates for inland moves. These private events are available only if you (or your end customer) are identified on the booking as: Booking Party, Deciding Party, Consignee, Notifier or Shipper. </li> </ul> </br> For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.2.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// FacilityTypeCodeTRN A specialized version of the facilityCode to be used in TransportCalls. The code to identify the specific type of facility. - BOCR (Border crossing) - CLOC (Customer location) - COFS (Container freight station) - COYA (Deprecated - use OFFD intead) - OFFD (Off dock storage) - DEPO (Depot) - INTE (Inland terminal) - POTE (Port terminal) - RAMP (Ramp)
type FacilityTypeCodeTRN string

// List of facilityTypeCodeTRN
const (
	BOCR FacilityTypeCodeTRN = "BOCR"
	CLOC FacilityTypeCodeTRN = "CLOC"
	COFS FacilityTypeCodeTRN = "COFS"
	COYA FacilityTypeCodeTRN = "COYA"
	OFFD FacilityTypeCodeTRN = "OFFD"
	DEPO FacilityTypeCodeTRN = "DEPO"
	INTE FacilityTypeCodeTRN = "INTE"
	POTE FacilityTypeCodeTRN = "POTE"
	RAMP FacilityTypeCodeTRN = "RAMP"
)

// All allowed values of FacilityTypeCodeTRN enum
var AllowedFacilityTypeCodeTRNEnumValues = []FacilityTypeCodeTRN{
	"BOCR",
	"CLOC",
	"COFS",
	"COYA",
	"OFFD",
	"DEPO",
	"INTE",
	"POTE",
	"RAMP",
}

func (v *FacilityTypeCodeTRN) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FacilityTypeCodeTRN(value)
	for _, existing := range AllowedFacilityTypeCodeTRNEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FacilityTypeCodeTRN", value)
}

// NewFacilityTypeCodeTRNFromValue returns a pointer to a valid FacilityTypeCodeTRN
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFacilityTypeCodeTRNFromValue(v string) (*FacilityTypeCodeTRN, error) {
	ev := FacilityTypeCodeTRN(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FacilityTypeCodeTRN: valid values are %v", v, AllowedFacilityTypeCodeTRNEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FacilityTypeCodeTRN) IsValid() bool {
	for _, existing := range AllowedFacilityTypeCodeTRNEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to facilityTypeCodeTRN value
func (v FacilityTypeCodeTRN) Ptr() *FacilityTypeCodeTRN {
	return &v
}

type NullableFacilityTypeCodeTRN struct {
	value *FacilityTypeCodeTRN
	isSet bool
}

func (v NullableFacilityTypeCodeTRN) Get() *FacilityTypeCodeTRN {
	return v.value
}

func (v *NullableFacilityTypeCodeTRN) Set(val *FacilityTypeCodeTRN) {
	v.value = val
	v.isSet = true
}

func (v NullableFacilityTypeCodeTRN) IsSet() bool {
	return v.isSet
}

func (v *NullableFacilityTypeCodeTRN) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacilityTypeCodeTRN(val *FacilityTypeCodeTRN) *NullableFacilityTypeCodeTRN {
	return &NullableFacilityTypeCodeTRN{value: val, isSet: true}
}

func (v NullableFacilityTypeCodeTRN) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacilityTypeCodeTRN) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
