/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org. For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.0.3
Contact: ho.support-api@cma-cgm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// BaseEventBodyAllOf struct for BaseEventBodyAllOf
type BaseEventBodyAllOf struct {
	// The Event Type of the object - to be used as a discriminator. <b>NB</b>&#58; This field should be considered Metadata
	EventType *string `json:"eventType,omitempty"`
}

// NewBaseEventBodyAllOf instantiates a new BaseEventBodyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEventBodyAllOf() *BaseEventBodyAllOf {
	this := BaseEventBodyAllOf{}
	return &this
}

// NewBaseEventBodyAllOfWithDefaults instantiates a new BaseEventBodyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEventBodyAllOfWithDefaults() *BaseEventBodyAllOf {
	this := BaseEventBodyAllOf{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *BaseEventBodyAllOf) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEventBodyAllOf) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *BaseEventBodyAllOf) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *BaseEventBodyAllOf) SetEventType(v string) {
	o.EventType = &v
}

func (o BaseEventBodyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	return json.Marshal(toSerialize)
}

type NullableBaseEventBodyAllOf struct {
	value *BaseEventBodyAllOf
	isSet bool
}

func (v NullableBaseEventBodyAllOf) Get() *BaseEventBodyAllOf {
	return v.value
}

func (v *NullableBaseEventBodyAllOf) Set(val *BaseEventBodyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEventBodyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEventBodyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEventBodyAllOf(val *BaseEventBodyAllOf) *NullableBaseEventBodyAllOf {
	return &NullableBaseEventBodyAllOf{value: val, isSet: true}
}

func (v NullableBaseEventBodyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEventBodyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


