/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org.  <i>Please note that shipment events and subscription management are not covered yet by CMA CGM API.</i>  <br> This API is accessible through <ul> <li> <b> Public </b> connection (authentication with API Key): this allows to retrieve standard equipment moves (e.g. ready to be loaded, discharged), Transhipment moves (e.g. discharged and re-loaded onboard) and planned vessel departure and arrival dates. </li> <li> <b> Private </b> connection (authentication with Oauth2 client credentials): this allows to retrieve additional private events such as actual rail and ramp moves, planned departure and arrival dates for inland moves. These private events are available only if you (or your end customer) are identified on the booking as: Booking Party, Deciding Party, Consignee, Notifier or Shipper. </li> </ul> </br> For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.2.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// InlineResponseDefault struct for InlineResponseDefault
type InlineResponseDefault struct {
	HttpMethod interface{}      `json:"httpMethod"`
	RequestUri interface{}      `json:"requestUri"`
	Errors     []SubErrorsInner `json:"errors"`
	// The HTTP status code
	StatusCode int32 `json:"statusCode"`
	// The textual representation of the response status.
	StatusCodeText string `json:"statusCodeText"`
	// The date and time (in ISO 8601 format) the error occurred.
	ErrorDateTime string `json:"errorDateTime"`
}

// NewInlineResponseDefault instantiates a new InlineResponseDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponseDefault(httpMethod interface{}, requestUri interface{}, errors []SubErrorsInner, statusCode int32, statusCodeText string, errorDateTime string) *InlineResponseDefault {
	this := InlineResponseDefault{}
	this.HttpMethod = httpMethod
	this.RequestUri = requestUri
	this.Errors = errors
	this.StatusCode = statusCode
	this.StatusCodeText = statusCodeText
	this.ErrorDateTime = errorDateTime
	return &this
}

// NewInlineResponseDefaultWithDefaults instantiates a new InlineResponseDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponseDefaultWithDefaults() *InlineResponseDefault {
	this := InlineResponseDefault{}
	return &this
}

// GetHttpMethod returns the HttpMethod field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InlineResponseDefault) GetHttpMethod() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponseDefault) GetHttpMethodOk() (*interface{}, bool) {
	if o == nil || o.HttpMethod == nil {
		return nil, false
	}
	return &o.HttpMethod, true
}

// SetHttpMethod sets field value
func (o *InlineResponseDefault) SetHttpMethod(v interface{}) {
	o.HttpMethod = v
}

// GetRequestUri returns the RequestUri field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InlineResponseDefault) GetRequestUri() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.RequestUri
}

// GetRequestUriOk returns a tuple with the RequestUri field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponseDefault) GetRequestUriOk() (*interface{}, bool) {
	if o == nil || o.RequestUri == nil {
		return nil, false
	}
	return &o.RequestUri, true
}

// SetRequestUri sets field value
func (o *InlineResponseDefault) SetRequestUri(v interface{}) {
	o.RequestUri = v
}

// GetErrors returns the Errors field value
func (o *InlineResponseDefault) GetErrors() []SubErrorsInner {
	if o == nil {
		var ret []SubErrorsInner
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *InlineResponseDefault) GetErrorsOk() ([]SubErrorsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *InlineResponseDefault) SetErrors(v []SubErrorsInner) {
	o.Errors = v
}

// GetStatusCode returns the StatusCode field value
func (o *InlineResponseDefault) GetStatusCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value
// and a boolean to check if the value has been set.
func (o *InlineResponseDefault) GetStatusCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCode, true
}

// SetStatusCode sets field value
func (o *InlineResponseDefault) SetStatusCode(v int32) {
	o.StatusCode = v
}

// GetStatusCodeText returns the StatusCodeText field value
func (o *InlineResponseDefault) GetStatusCodeText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusCodeText
}

// GetStatusCodeTextOk returns a tuple with the StatusCodeText field value
// and a boolean to check if the value has been set.
func (o *InlineResponseDefault) GetStatusCodeTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCodeText, true
}

// SetStatusCodeText sets field value
func (o *InlineResponseDefault) SetStatusCodeText(v string) {
	o.StatusCodeText = v
}

// GetErrorDateTime returns the ErrorDateTime field value
func (o *InlineResponseDefault) GetErrorDateTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorDateTime
}

// GetErrorDateTimeOk returns a tuple with the ErrorDateTime field value
// and a boolean to check if the value has been set.
func (o *InlineResponseDefault) GetErrorDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorDateTime, true
}

// SetErrorDateTime sets field value
func (o *InlineResponseDefault) SetErrorDateTime(v string) {
	o.ErrorDateTime = v
}

func (o InlineResponseDefault) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HttpMethod != nil {
		toSerialize["httpMethod"] = o.HttpMethod
	}
	if o.RequestUri != nil {
		toSerialize["requestUri"] = o.RequestUri
	}
	if true {
		toSerialize["errors"] = o.Errors
	}
	if true {
		toSerialize["statusCode"] = o.StatusCode
	}
	if true {
		toSerialize["statusCodeText"] = o.StatusCodeText
	}
	if true {
		toSerialize["errorDateTime"] = o.ErrorDateTime
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponseDefault struct {
	value *InlineResponseDefault
	isSet bool
}

func (v NullableInlineResponseDefault) Get() *InlineResponseDefault {
	return v.value
}

func (v *NullableInlineResponseDefault) Set(val *InlineResponseDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponseDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponseDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponseDefault(val *InlineResponseDefault) *NullableInlineResponseDefault {
	return &NullableInlineResponseDefault{value: val, isSet: true}
}

func (v NullableInlineResponseDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponseDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
