/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org. For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.0.3
Contact: ho.support-api@cma-cgm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// LocationAllOf3 struct for LocationAllOf3
type LocationAllOf3 struct {
	// Address related information
	Address NullableAddress `json:"address,omitempty"`
}

// NewLocationAllOf3 instantiates a new LocationAllOf3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationAllOf3() *LocationAllOf3 {
	this := LocationAllOf3{}
	return &this
}

// NewLocationAllOf3WithDefaults instantiates a new LocationAllOf3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationAllOf3WithDefaults() *LocationAllOf3 {
	this := LocationAllOf3{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationAllOf3) GetAddress() Address {
	if o == nil || o.Address.Get() == nil {
		var ret Address
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationAllOf3) GetAddressOk() (*Address, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *LocationAllOf3) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableAddress and assigns it to the Address field.
func (o *LocationAllOf3) SetAddress(v Address) {
	o.Address.Set(&v)
}

// SetAddressNil sets the value for Address to be an explicit nil
func (o *LocationAllOf3) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *LocationAllOf3) UnsetAddress() {
	o.Address.Unset()
}

func (o LocationAllOf3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLocationAllOf3 struct {
	value *LocationAllOf3
	isSet bool
}

func (v NullableLocationAllOf3) Get() *LocationAllOf3 {
	return v.value
}

func (v *NullableLocationAllOf3) Set(val *LocationAllOf3) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationAllOf3) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationAllOf3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationAllOf3(val *LocationAllOf3) *NullableLocationAllOf3 {
	return &NullableLocationAllOf3{value: val, isSet: true}
}

func (v NullableLocationAllOf3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationAllOf3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
