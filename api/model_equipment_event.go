/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org. For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.0.3
Contact: ho.support-api@cma-cgm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// EquipmentEvent struct for EquipmentEvent
type EquipmentEvent struct {
	// The unique identifier for the event (the message - not the source). <b>NB</b>&#58; This field should be considered Metadata
	EventID *string `json:"eventID,omitempty"`
	// The timestamp of when the event was created. <b>NB</b>&#58; This field should be considered Metadata
	EventCreatedDateTime time.Time `json:"eventCreatedDateTime"`
	EventType string `json:"eventType"`
	// Code for the event classifier can be - PLN (Planned) - ACT (Actual) - EST (Estimated)
	EventClassifierCode string `json:"eventClassifierCode"`
	// The local date and time, where the event took place or when the event will take place, in ISO 8601 format.
	EventDateTime time.Time `json:"eventDateTime"`
	CarrierSpecificData *CarrierSpecificData `json:"carrierSpecificData,omitempty"`
	EquipmentEventTypeCode EquipmentEventTypeCode `json:"equipmentEventTypeCode"`
	// The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation
	EquipmentReference *string `json:"equipmentReference,omitempty"`
	// Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.
	ISOEquipmentCode *string `json:"ISOEquipmentCode,omitempty"`
	EmptyIndicatorCode EmptyIndicatorCode `json:"emptyIndicatorCode"`
	EventLocation *Location `json:"eventLocation,omitempty"`
	TransportCall *TransportCall `json:"transportCall,omitempty"`
	// An optional list of key-value (documentReferenceType-documentReferenceValue) pairs representing links to objects relevant to the event. The <b>documentReferenceType</b>-field is used to describe where the <b>documentReferenceValue</b>-field is pointing to.
	DocumentReferences []DocumentReferencesInner `json:"documentReferences,omitempty"`
	References []Reference `json:"references,omitempty"`
	Seals []Seal `json:"seals,omitempty"`
}

// NewEquipmentEvent instantiates a new EquipmentEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentEvent(eventCreatedDateTime time.Time, eventType string, eventClassifierCode string, eventDateTime time.Time, equipmentEventTypeCode EquipmentEventTypeCode, emptyIndicatorCode EmptyIndicatorCode) *EquipmentEvent {
	this := EquipmentEvent{}
	this.EventCreatedDateTime = eventCreatedDateTime
	this.EventType = eventType
	this.EventClassifierCode = eventClassifierCode
	this.EventDateTime = eventDateTime
	this.EquipmentEventTypeCode = equipmentEventTypeCode
	this.EmptyIndicatorCode = emptyIndicatorCode
	return &this
}

// NewEquipmentEventWithDefaults instantiates a new EquipmentEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentEventWithDefaults() *EquipmentEvent {
	this := EquipmentEvent{}
	return &this
}

// GetEventID returns the EventID field value if set, zero value otherwise.
func (o *EquipmentEvent) GetEventID() string {
	if o == nil || o.EventID == nil {
		var ret string
		return ret
	}
	return *o.EventID
}

// GetEventIDOk returns a tuple with the EventID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetEventIDOk() (*string, bool) {
	if o == nil || o.EventID == nil {
		return nil, false
	}
	return o.EventID, true
}

// HasEventID returns a boolean if a field has been set.
func (o *EquipmentEvent) HasEventID() bool {
	if o != nil && o.EventID != nil {
		return true
	}

	return false
}

// SetEventID gets a reference to the given string and assigns it to the EventID field.
func (o *EquipmentEvent) SetEventID(v string) {
	o.EventID = &v
}

// GetEventCreatedDateTime returns the EventCreatedDateTime field value
func (o *EquipmentEvent) GetEventCreatedDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EventCreatedDateTime
}

// GetEventCreatedDateTimeOk returns a tuple with the EventCreatedDateTime field value
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetEventCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventCreatedDateTime, true
}

// SetEventCreatedDateTime sets field value
func (o *EquipmentEvent) SetEventCreatedDateTime(v time.Time) {
	o.EventCreatedDateTime = v
}

// GetEventType returns the EventType field value
func (o *EquipmentEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *EquipmentEvent) SetEventType(v string) {
	o.EventType = v
}

// GetEventClassifierCode returns the EventClassifierCode field value
func (o *EquipmentEvent) GetEventClassifierCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventClassifierCode
}

// GetEventClassifierCodeOk returns a tuple with the EventClassifierCode field value
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetEventClassifierCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventClassifierCode, true
}

// SetEventClassifierCode sets field value
func (o *EquipmentEvent) SetEventClassifierCode(v string) {
	o.EventClassifierCode = v
}

// GetEventDateTime returns the EventDateTime field value
func (o *EquipmentEvent) GetEventDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EventDateTime
}

// GetEventDateTimeOk returns a tuple with the EventDateTime field value
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetEventDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventDateTime, true
}

// SetEventDateTime sets field value
func (o *EquipmentEvent) SetEventDateTime(v time.Time) {
	o.EventDateTime = v
}

// GetCarrierSpecificData returns the CarrierSpecificData field value if set, zero value otherwise.
func (o *EquipmentEvent) GetCarrierSpecificData() CarrierSpecificData {
	if o == nil || o.CarrierSpecificData == nil {
		var ret CarrierSpecificData
		return ret
	}
	return *o.CarrierSpecificData
}

// GetCarrierSpecificDataOk returns a tuple with the CarrierSpecificData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetCarrierSpecificDataOk() (*CarrierSpecificData, bool) {
	if o == nil || o.CarrierSpecificData == nil {
		return nil, false
	}
	return o.CarrierSpecificData, true
}

// HasCarrierSpecificData returns a boolean if a field has been set.
func (o *EquipmentEvent) HasCarrierSpecificData() bool {
	if o != nil && o.CarrierSpecificData != nil {
		return true
	}

	return false
}

// SetCarrierSpecificData gets a reference to the given CarrierSpecificData and assigns it to the CarrierSpecificData field.
func (o *EquipmentEvent) SetCarrierSpecificData(v CarrierSpecificData) {
	o.CarrierSpecificData = &v
}

// GetEquipmentEventTypeCode returns the EquipmentEventTypeCode field value
func (o *EquipmentEvent) GetEquipmentEventTypeCode() EquipmentEventTypeCode {
	if o == nil {
		var ret EquipmentEventTypeCode
		return ret
	}

	return o.EquipmentEventTypeCode
}

// GetEquipmentEventTypeCodeOk returns a tuple with the EquipmentEventTypeCode field value
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetEquipmentEventTypeCodeOk() (*EquipmentEventTypeCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EquipmentEventTypeCode, true
}

// SetEquipmentEventTypeCode sets field value
func (o *EquipmentEvent) SetEquipmentEventTypeCode(v EquipmentEventTypeCode) {
	o.EquipmentEventTypeCode = v
}

// GetEquipmentReference returns the EquipmentReference field value if set, zero value otherwise.
func (o *EquipmentEvent) GetEquipmentReference() string {
	if o == nil || o.EquipmentReference == nil {
		var ret string
		return ret
	}
	return *o.EquipmentReference
}

// GetEquipmentReferenceOk returns a tuple with the EquipmentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetEquipmentReferenceOk() (*string, bool) {
	if o == nil || o.EquipmentReference == nil {
		return nil, false
	}
	return o.EquipmentReference, true
}

// HasEquipmentReference returns a boolean if a field has been set.
func (o *EquipmentEvent) HasEquipmentReference() bool {
	if o != nil && o.EquipmentReference != nil {
		return true
	}

	return false
}

// SetEquipmentReference gets a reference to the given string and assigns it to the EquipmentReference field.
func (o *EquipmentEvent) SetEquipmentReference(v string) {
	o.EquipmentReference = &v
}

// GetISOEquipmentCode returns the ISOEquipmentCode field value if set, zero value otherwise.
func (o *EquipmentEvent) GetISOEquipmentCode() string {
	if o == nil || o.ISOEquipmentCode == nil {
		var ret string
		return ret
	}
	return *o.ISOEquipmentCode
}

// GetISOEquipmentCodeOk returns a tuple with the ISOEquipmentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetISOEquipmentCodeOk() (*string, bool) {
	if o == nil || o.ISOEquipmentCode == nil {
		return nil, false
	}
	return o.ISOEquipmentCode, true
}

// HasISOEquipmentCode returns a boolean if a field has been set.
func (o *EquipmentEvent) HasISOEquipmentCode() bool {
	if o != nil && o.ISOEquipmentCode != nil {
		return true
	}

	return false
}

// SetISOEquipmentCode gets a reference to the given string and assigns it to the ISOEquipmentCode field.
func (o *EquipmentEvent) SetISOEquipmentCode(v string) {
	o.ISOEquipmentCode = &v
}

// GetEmptyIndicatorCode returns the EmptyIndicatorCode field value
func (o *EquipmentEvent) GetEmptyIndicatorCode() EmptyIndicatorCode {
	if o == nil {
		var ret EmptyIndicatorCode
		return ret
	}

	return o.EmptyIndicatorCode
}

// GetEmptyIndicatorCodeOk returns a tuple with the EmptyIndicatorCode field value
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetEmptyIndicatorCodeOk() (*EmptyIndicatorCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmptyIndicatorCode, true
}

// SetEmptyIndicatorCode sets field value
func (o *EquipmentEvent) SetEmptyIndicatorCode(v EmptyIndicatorCode) {
	o.EmptyIndicatorCode = v
}

// GetEventLocation returns the EventLocation field value if set, zero value otherwise.
func (o *EquipmentEvent) GetEventLocation() Location {
	if o == nil || o.EventLocation == nil {
		var ret Location
		return ret
	}
	return *o.EventLocation
}

// GetEventLocationOk returns a tuple with the EventLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetEventLocationOk() (*Location, bool) {
	if o == nil || o.EventLocation == nil {
		return nil, false
	}
	return o.EventLocation, true
}

// HasEventLocation returns a boolean if a field has been set.
func (o *EquipmentEvent) HasEventLocation() bool {
	if o != nil && o.EventLocation != nil {
		return true
	}

	return false
}

// SetEventLocation gets a reference to the given Location and assigns it to the EventLocation field.
func (o *EquipmentEvent) SetEventLocation(v Location) {
	o.EventLocation = &v
}

// GetTransportCall returns the TransportCall field value if set, zero value otherwise.
func (o *EquipmentEvent) GetTransportCall() TransportCall {
	if o == nil || o.TransportCall == nil {
		var ret TransportCall
		return ret
	}
	return *o.TransportCall
}

// GetTransportCallOk returns a tuple with the TransportCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetTransportCallOk() (*TransportCall, bool) {
	if o == nil || o.TransportCall == nil {
		return nil, false
	}
	return o.TransportCall, true
}

// HasTransportCall returns a boolean if a field has been set.
func (o *EquipmentEvent) HasTransportCall() bool {
	if o != nil && o.TransportCall != nil {
		return true
	}

	return false
}

// SetTransportCall gets a reference to the given TransportCall and assigns it to the TransportCall field.
func (o *EquipmentEvent) SetTransportCall(v TransportCall) {
	o.TransportCall = &v
}

// GetDocumentReferences returns the DocumentReferences field value if set, zero value otherwise.
func (o *EquipmentEvent) GetDocumentReferences() []DocumentReferencesInner {
	if o == nil || o.DocumentReferences == nil {
		var ret []DocumentReferencesInner
		return ret
	}
	return o.DocumentReferences
}

// GetDocumentReferencesOk returns a tuple with the DocumentReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetDocumentReferencesOk() ([]DocumentReferencesInner, bool) {
	if o == nil || o.DocumentReferences == nil {
		return nil, false
	}
	return o.DocumentReferences, true
}

// HasDocumentReferences returns a boolean if a field has been set.
func (o *EquipmentEvent) HasDocumentReferences() bool {
	if o != nil && o.DocumentReferences != nil {
		return true
	}

	return false
}

// SetDocumentReferences gets a reference to the given []DocumentReferencesInner and assigns it to the DocumentReferences field.
func (o *EquipmentEvent) SetDocumentReferences(v []DocumentReferencesInner) {
	o.DocumentReferences = v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *EquipmentEvent) GetReferences() []Reference {
	if o == nil || o.References == nil {
		var ret []Reference
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetReferencesOk() ([]Reference, bool) {
	if o == nil || o.References == nil {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *EquipmentEvent) HasReferences() bool {
	if o != nil && o.References != nil {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []Reference and assigns it to the References field.
func (o *EquipmentEvent) SetReferences(v []Reference) {
	o.References = v
}

// GetSeals returns the Seals field value if set, zero value otherwise.
func (o *EquipmentEvent) GetSeals() []Seal {
	if o == nil || o.Seals == nil {
		var ret []Seal
		return ret
	}
	return o.Seals
}

// GetSealsOk returns a tuple with the Seals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEvent) GetSealsOk() ([]Seal, bool) {
	if o == nil || o.Seals == nil {
		return nil, false
	}
	return o.Seals, true
}

// HasSeals returns a boolean if a field has been set.
func (o *EquipmentEvent) HasSeals() bool {
	if o != nil && o.Seals != nil {
		return true
	}

	return false
}

// SetSeals gets a reference to the given []Seal and assigns it to the Seals field.
func (o *EquipmentEvent) SetSeals(v []Seal) {
	o.Seals = v
}

func (o EquipmentEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventID != nil {
		toSerialize["eventID"] = o.EventID
	}
	if true {
		toSerialize["eventCreatedDateTime"] = o.EventCreatedDateTime
	}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["eventClassifierCode"] = o.EventClassifierCode
	}
	if true {
		toSerialize["eventDateTime"] = o.EventDateTime
	}
	if o.CarrierSpecificData != nil {
		toSerialize["carrierSpecificData"] = o.CarrierSpecificData
	}
	if true {
		toSerialize["equipmentEventTypeCode"] = o.EquipmentEventTypeCode
	}
	if o.EquipmentReference != nil {
		toSerialize["equipmentReference"] = o.EquipmentReference
	}
	if o.ISOEquipmentCode != nil {
		toSerialize["ISOEquipmentCode"] = o.ISOEquipmentCode
	}
	if true {
		toSerialize["emptyIndicatorCode"] = o.EmptyIndicatorCode
	}
	if o.EventLocation != nil {
		toSerialize["eventLocation"] = o.EventLocation
	}
	if o.TransportCall != nil {
		toSerialize["transportCall"] = o.TransportCall
	}
	if o.DocumentReferences != nil {
		toSerialize["documentReferences"] = o.DocumentReferences
	}
	if o.References != nil {
		toSerialize["references"] = o.References
	}
	if o.Seals != nil {
		toSerialize["seals"] = o.Seals
	}
	return json.Marshal(toSerialize)
}

type NullableEquipmentEvent struct {
	value *EquipmentEvent
	isSet bool
}

func (v NullableEquipmentEvent) Get() *EquipmentEvent {
	return v.value
}

func (v *NullableEquipmentEvent) Set(val *EquipmentEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentEvent(val *EquipmentEvent) *NullableEquipmentEvent {
	return &NullableEquipmentEvent{value: val, isSet: true}
}

func (v NullableEquipmentEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


