/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org. For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.0.3
Contact: ho.support-api@cma-cgm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// VesselAllOf2 struct for VesselAllOf2
type VesselAllOf2 struct {
	// The flag of the nation whose laws the vessel is registered under. This is the ISO 3166 two-letter country code
	VesselFlag *string `json:"vesselFlag,omitempty"`
}

// NewVesselAllOf2 instantiates a new VesselAllOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVesselAllOf2() *VesselAllOf2 {
	this := VesselAllOf2{}
	return &this
}

// NewVesselAllOf2WithDefaults instantiates a new VesselAllOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVesselAllOf2WithDefaults() *VesselAllOf2 {
	this := VesselAllOf2{}
	return &this
}

// GetVesselFlag returns the VesselFlag field value if set, zero value otherwise.
func (o *VesselAllOf2) GetVesselFlag() string {
	if o == nil || o.VesselFlag == nil {
		var ret string
		return ret
	}
	return *o.VesselFlag
}

// GetVesselFlagOk returns a tuple with the VesselFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VesselAllOf2) GetVesselFlagOk() (*string, bool) {
	if o == nil || o.VesselFlag == nil {
		return nil, false
	}
	return o.VesselFlag, true
}

// HasVesselFlag returns a boolean if a field has been set.
func (o *VesselAllOf2) HasVesselFlag() bool {
	if o != nil && o.VesselFlag != nil {
		return true
	}

	return false
}

// SetVesselFlag gets a reference to the given string and assigns it to the VesselFlag field.
func (o *VesselAllOf2) SetVesselFlag(v string) {
	o.VesselFlag = &v
}

func (o VesselAllOf2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VesselFlag != nil {
		toSerialize["vesselFlag"] = o.VesselFlag
	}
	return json.Marshal(toSerialize)
}

type NullableVesselAllOf2 struct {
	value *VesselAllOf2
	isSet bool
}

func (v NullableVesselAllOf2) Get() *VesselAllOf2 {
	return v.value
}

func (v *NullableVesselAllOf2) Set(val *VesselAllOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableVesselAllOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableVesselAllOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVesselAllOf2(val *VesselAllOf2) *NullableVesselAllOf2 {
	return &NullableVesselAllOf2{value: val, isSet: true}
}

func (v NullableVesselAllOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVesselAllOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
