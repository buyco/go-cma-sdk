/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org.  <i>Please note that shipment events and subscription management are not covered yet by CMA CGM API.</i>  <br> This API is accessible through <ul> <li> <b> Public </b> connection (authentication with API Key): this allows to retrieve standard equipment moves (e.g. ready to be loaded, discharged), Transhipment moves (e.g. discharged and re-loaded onboard) and planned vessel departure and arrival dates. </li> <li> <b> Private </b> connection (authentication with Oauth2 client credentials): this allows to retrieve additional private events such as actual rail and ramp moves, planned departure and arrival dates for inland moves. These private events are available only if you (or your end customer) are identified on the booking as: Booking Party, Deciding Party, Consignee, Notifier or Shipper. </li> </ul> </br> For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.2.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// BaseTransportEventAllOf5 struct for BaseTransportEventAllOf5
type BaseTransportEventAllOf5 struct {
	TransportCall *TransportCall `json:"transportCall,omitempty"`
}

// NewBaseTransportEventAllOf5 instantiates a new BaseTransportEventAllOf5 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTransportEventAllOf5() *BaseTransportEventAllOf5 {
	this := BaseTransportEventAllOf5{}
	return &this
}

// NewBaseTransportEventAllOf5WithDefaults instantiates a new BaseTransportEventAllOf5 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTransportEventAllOf5WithDefaults() *BaseTransportEventAllOf5 {
	this := BaseTransportEventAllOf5{}
	return &this
}

// GetTransportCall returns the TransportCall field value if set, zero value otherwise.
func (o *BaseTransportEventAllOf5) GetTransportCall() TransportCall {
	if o == nil || o.TransportCall == nil {
		var ret TransportCall
		return ret
	}
	return *o.TransportCall
}

// GetTransportCallOk returns a tuple with the TransportCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTransportEventAllOf5) GetTransportCallOk() (*TransportCall, bool) {
	if o == nil || o.TransportCall == nil {
		return nil, false
	}
	return o.TransportCall, true
}

// HasTransportCall returns a boolean if a field has been set.
func (o *BaseTransportEventAllOf5) HasTransportCall() bool {
	if o != nil && o.TransportCall != nil {
		return true
	}

	return false
}

// SetTransportCall gets a reference to the given TransportCall and assigns it to the TransportCall field.
func (o *BaseTransportEventAllOf5) SetTransportCall(v TransportCall) {
	o.TransportCall = &v
}

func (o BaseTransportEventAllOf5) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TransportCall != nil {
		toSerialize["transportCall"] = o.TransportCall
	}
	return json.Marshal(toSerialize)
}

type NullableBaseTransportEventAllOf5 struct {
	value *BaseTransportEventAllOf5
	isSet bool
}

func (v NullableBaseTransportEventAllOf5) Get() *BaseTransportEventAllOf5 {
	return v.value
}

func (v *NullableBaseTransportEventAllOf5) Set(val *BaseTransportEventAllOf5) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTransportEventAllOf5) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTransportEventAllOf5) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTransportEventAllOf5(val *BaseTransportEventAllOf5) *NullableBaseTransportEventAllOf5 {
	return &NullableBaseTransportEventAllOf5{value: val, isSet: true}
}

func (v NullableBaseTransportEventAllOf5) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTransportEventAllOf5) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
