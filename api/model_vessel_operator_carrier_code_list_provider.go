/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org. For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.0.3
Contact: ho.support-api@cma-cgm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// VesselOperatorCarrierCodeListProvider Identifies the code list provider used for the operator and partner carriercodes.
type VesselOperatorCarrierCodeListProvider string

// List of vesselOperatorCarrierCodeListProvider
const (
	SMDG  VesselOperatorCarrierCodeListProvider = "SMDG"
	NMFTA VesselOperatorCarrierCodeListProvider = "NMFTA"
)

// All allowed values of VesselOperatorCarrierCodeListProvider enum
var AllowedVesselOperatorCarrierCodeListProviderEnumValues = []VesselOperatorCarrierCodeListProvider{
	"SMDG",
	"NMFTA",
}

func (v *VesselOperatorCarrierCodeListProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VesselOperatorCarrierCodeListProvider(value)
	for _, existing := range AllowedVesselOperatorCarrierCodeListProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VesselOperatorCarrierCodeListProvider", value)
}

// NewVesselOperatorCarrierCodeListProviderFromValue returns a pointer to a valid VesselOperatorCarrierCodeListProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVesselOperatorCarrierCodeListProviderFromValue(v string) (*VesselOperatorCarrierCodeListProvider, error) {
	ev := VesselOperatorCarrierCodeListProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VesselOperatorCarrierCodeListProvider: valid values are %v", v, AllowedVesselOperatorCarrierCodeListProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VesselOperatorCarrierCodeListProvider) IsValid() bool {
	for _, existing := range AllowedVesselOperatorCarrierCodeListProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vesselOperatorCarrierCodeListProvider value
func (v VesselOperatorCarrierCodeListProvider) Ptr() *VesselOperatorCarrierCodeListProvider {
	return &v
}

type NullableVesselOperatorCarrierCodeListProvider struct {
	value *VesselOperatorCarrierCodeListProvider
	isSet bool
}

func (v NullableVesselOperatorCarrierCodeListProvider) Get() *VesselOperatorCarrierCodeListProvider {
	return v.value
}

func (v *NullableVesselOperatorCarrierCodeListProvider) Set(val *VesselOperatorCarrierCodeListProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableVesselOperatorCarrierCodeListProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableVesselOperatorCarrierCodeListProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVesselOperatorCarrierCodeListProvider(val *VesselOperatorCarrierCodeListProvider) *NullableVesselOperatorCarrierCodeListProvider {
	return &NullableVesselOperatorCarrierCodeListProvider{value: val, isSet: true}
}

func (v NullableVesselOperatorCarrierCodeListProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVesselOperatorCarrierCodeListProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
