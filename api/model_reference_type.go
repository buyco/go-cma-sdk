/*
Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org.  <i>Please note that shipment events and subscription management are not covered yet by CMA CGM API.</i>  <br> This API is accessible through <ul> <li> <b> Public </b> connection (authentication with API Key): this allows to retrieve standard equipment moves (e.g. ready to be loaded, discharged), Transhipment moves (e.g. discharged and re-loaded onboard) and planned vessel departure and arrival dates. </li> <li> <b> Private </b> connection (authentication with Oauth2 client credentials): this allows to retrieve additional private events such as actual rail and ramp moves, planned departure and arrival dates for inland moves. These private events are available only if you (or your end customer) are identified on the booking as: Booking Party, Deciding Party, Consignee, Notifier or Shipper. </li> </ul> </br> For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

API version: 1.2.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ReferenceType The reference type codes defined by DCSA. - FF (Freight Forwarder’s Reference) - SI (Shipper’s Reference) - PO (Purchase Order Reference) - CR (Customer’s Reference) - AAO (Consignee’s Reference) - EQ (Equipment Reference) - LOAD (Load Reference - CMA) - ERT (Empty Return Reference - CMA)
type ReferenceType string

// List of referenceType
const (
	REF_FF   ReferenceType = "FF"
	REF_SI   ReferenceType = "SI"
	REF_PO   ReferenceType = "PO"
	REF_CR   ReferenceType = "CR"
	REF_AAO  ReferenceType = "AAO"
	REF_EQ   ReferenceType = "EQ"
	REF_LOAD ReferenceType = "LOAD"
	REF_ERT  ReferenceType = "ERT"
)

// All allowed values of ReferenceType enum
var AllowedReferenceTypeEnumValues = []ReferenceType{
	"FF",
	"SI",
	"PO",
	"CR",
	"AAO",
	"EQ",
	"LOAD",
	"ERT",
}

func (v *ReferenceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReferenceType(value)
	for _, existing := range AllowedReferenceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReferenceType", value)
}

// NewReferenceTypeFromValue returns a pointer to a valid ReferenceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReferenceTypeFromValue(v string) (*ReferenceType, error) {
	ev := ReferenceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReferenceType: valid values are %v", v, AllowedReferenceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReferenceType) IsValid() bool {
	for _, existing := range AllowedReferenceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to referenceType value
func (v ReferenceType) Ptr() *ReferenceType {
	return &v
}

type NullableReferenceType struct {
	value *ReferenceType
	isSet bool
}

func (v NullableReferenceType) Get() *ReferenceType {
	return v.value
}

func (v *NullableReferenceType) Set(val *ReferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceType(val *ReferenceType) *NullableReferenceType {
	return &NullableReferenceType{value: val, isSet: true}
}

func (v NullableReferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
